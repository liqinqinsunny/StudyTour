//
//  UserLoginViewController.m
//  StudyTour
//
//  Created by Apple on 16/5/31.
//  Copyright © 2016年 lqq. All rights reserved.
//

#import "UserLoginViewController.h"
#import "EnrollCountryViewController.h"
#import "EnrollTeacherViewController.h"
#import "JPDeleteLastSpace.h"
#import "CardIdVerification.h"

#import "UIView+Extension.h"
#import "Downloader.h"
#import "UserInfoModel.h"
#import "UIImageView+WebCache.h"
#import "TraveIntroViewController.h"
#import "TravelIntroModel.h"
#import "MJExtension.h"
#import "WJPTravelNoteHomePageController.h"

@interface UserLoginViewController ()
@property(nonatomic,assign) BOOL loadCacheSuccess;

@end

@interface UserLoginViewController()<UITextFieldDelegate,UIScrollViewDelegate>

@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;
@property (weak, nonatomic) IBOutlet UIPageControl *pageControl;


@property (weak, nonatomic) IBOutlet UIButton *makeSureBtn;
@property (weak, nonatomic) IBOutlet UITextField *cardIdTextField;
@property (strong, nonatomic) IBOutlet UIView *myRootView;


@property (nonatomic, assign) CGFloat keyboardDur;
@property (nonatomic, assign) CGFloat keyboardHeight;
@property(nonatomic,strong) NSTimer *timer;


@end

@implementation UserLoginViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    _cardIdTextField.text = @"330727200011110012";
    _cardIdTextField.delegate = self;
    [_cardIdTextField setValue:[UIColor colorWithHex:0xC1B0A0] forKeyPath:@"_placeholderLabel.textColor"];
    [_cardIdTextField setValue:[UIFont systemFontOfSize:12] forKeyPath:@"_placeholderLabel.font"];
    // textField内容要与"参与游学"对齐
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 17, 5)];
    _cardIdTextField.leftView = view;
    _cardIdTextField.leftViewMode = UITextFieldViewModeAlways;
    
    
    [UIApplication sharedApplication].statusBarStyle = UIStatusBarStyleDefault;
    
    self.scrollView.delegate = self;
    
    [self addTimer];
}



#pragma mark 解析数据
- (void)parseData:(NSDictionary *)originData
{
    if ([originData[@"result"] isEqualToString:@"T"]) {
        NSArray *ary = originData[@"carouselImages"];
        if (ary.count) {
            
            [self.scrollView.subviews enumerateObjectsUsingBlock:^(__kindof UIView * _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                [obj removeFromSuperview];
            }];
            
            [ary enumerateObjectsUsingBlock:^(NSDictionary *url, NSUInteger idx, BOOL * _Nonnull stop) {
                UIImageView *imgView1 = [[UIImageView alloc]init];
                
                [imgView1 sd_setImageWithURL:[NSURL URLWithString:url[@"imageUrl"]] placeholderImage:[UIImage imageNamed: @"mainbg_default"]];
                [self.scrollView addSubview:imgView1];
            }];
            
            [self.scrollView.subviews enumerateObjectsUsingBlock:^(UIImageView *imgView, NSUInteger idx, BOOL * _Nonnull stop) {
                imgView.contentMode = UIViewContentModeScaleAspectFit;
                imgView.width = self.scrollView.width;
                imgView.height = self.scrollView.height;
                imgView.x = self.scrollView.width * idx;
                imgView.y = 0;
            }];
            CGFloat w = self.scrollView.width * self.scrollView.subviews.count;
            self.scrollView.contentSize = CGSizeMake(w, self.scrollView.height);
            self.pageControl.numberOfPages = self.scrollView.subviews.count;
            
        }
    }
}

#pragma mark 从缓存中取数据
- (void)loadDataFromCache
{
    NSString *carouseCachePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)firstObject] stringByAppendingPathComponent:@"carouselData.json"];
    
    NSDictionary *dict =[self readSaveData:carouseCachePath];
    if(!dict){
        _loadCacheSuccess = NO;
        return;
    }else
    {
        _loadCacheSuccess = YES;
        [self parseData:dict];
    }
    self.scrollView.delegate = self;
    
    [self addTimer];
}

#pragma mark 从服务器取数据
- (void)loadDataFromServer
{
    Downloader *downloader = [[Downloader alloc] init];

    NSString *carouseCachePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)firstObject] stringByAppendingPathComponent:@"carouselData.json"];
    [downloader POST:CarouselShowURL cachePath:carouseCachePath param:nil wating:^{
        
    } fail:^{
        if (_loadCacheSuccess) {
            dispatch_async(dispatch_get_main_queue(), ^{
                [self loadDataFromCache];
                [self showTips:NetWorkTips];
            });
        }else
        {
            [self showTips:NetWorkTips];
        }
    } success:^(NSDictionary *originData) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [self parseData:originData];
        });
    } refresh:YES];
    
}

- (void)addTimer
{
     self.timer = [NSTimer scheduledTimerWithTimeInterval:2 target:self selector:@selector(loadslideImages) userInfo:nil repeats:YES];
}
- (void)removeTimer
 {
    [self.timer invalidate];
}


// 轮播图片
- (void)loadslideImages
{
    NSInteger page = self.pageControl.currentPage;
    if (page == self.pageControl.numberOfPages - 1) {
        page = 0;
    } else {
        page++;
    }
    CGFloat x = page * self.scrollView.width;
    self.scrollView.contentOffset = CGPointMake(x, 0);
}

#pragma mark UIScrollViewDelegate
- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset {
    CGFloat index = targetContentOffset->x / scrollView.width;
    self.pageControl.currentPage = index;
}
- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    CGFloat scrollviewW =  scrollView.width;
    CGFloat x = scrollView.contentOffset.x;
    int page = (x + scrollviewW / 2) /  scrollviewW;
    self.pageControl.currentPage = page;
}
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
    [self addTimer];
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
    if ([_cardIdTextField isFirstResponder]) {
        [_cardIdTextField resignFirstResponder];
    }
    [self removeTimer];
}
#pragma mark 国家线路
- (IBAction)countryBtnClicked:(UIButton *)sender {
    EnrollCountryViewController *ecvc = [[EnrollCountryViewController alloc] init];
    [self.navigationController pushViewController:ecvc animated:YES];
}
#pragma mark 老师风采
- (IBAction)teacherBtnClicked:(UIButton *)sender {
    EnrollTeacherViewController *etvc = [[EnrollTeacherViewController alloc] init];
    [self.navigationController pushViewController:etvc animated:YES];
}
#pragma mark - 确认身份
- (IBAction)makeSureTouchDown:(UIButton *)sender {
    sender.backgroundColor = [UIColor colorWithHex:0x19b351];
}

- (IBAction)makeSureClickOutside:(UIButton *)sender {
    sender.backgroundColor = [UIColor colorWithHex:0x1ac057];
}

- (IBAction)makeSureClickConnection:(UIButton *)sender {
    
    _cardIdTextField.text = [JPDeleteLastSpace deleteLastSpaceInString:_cardIdTextField.text];

    
    if (_cardIdTextField.text.length > 0 ) {
        if (![CardIdVerification passportVerification:_cardIdTextField.text]) {
                //  替换 'x' --> 'X'
            if (_cardIdTextField.text.length > 0 && [[_cardIdTextField.text substringFromIndex:_cardIdTextField.text.length-1] isEqualToString:@"x"]) {
                NSString *xxxString = [_cardIdTextField.text substringToIndex:_cardIdTextField.text.length-1];
                _cardIdTextField.text = [xxxString stringByAppendingString:@"X"];
            }
            if (![CardIdVerification cardIdVerification:_cardIdTextField.text]) {
                [self showTips:@"身份证或者护照格式错误"];
                return;
            }
            [self showTips:@"身份证或者护照格式错误！"];
            return;
        }
    }

    if (_cardIdTextField.isFirstResponder) {
        [_cardIdTextField resignFirstResponder];
    }
    [self submitCardId];
}

- (void)submitCardId
{
    [self showHud];
    Downloader *downloader = [[Downloader alloc] init];
    NSDictionary *param = @{@"cardId":_cardIdTextField.text};
    [downloader POST:LoginURL param:param wating:^{
        
    } fail:^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [self hideHud];
            [self showTips:NetWorkTips];
        });
    } success:^(NSDictionary *originData) {
        if (![originData[@"result"] isEqualToString: @"T"]) {
            [self hideHud];
            [self showTips:originData[@"error"]];
        } else {
            dispatch_async(dispatch_get_main_queue(), ^{
                [self hideHud];
                
                [UserInfoModel saveUserinfo:originData];
                [[NSUserDefaults standardUserDefaults] setObject:@"YES" forKey:@"LOGIN"];
                
                id obj = [[NSUserDefaults standardUserDefaults] objectForKey:AgreementKey];
                if (obj == nil) {
                    UserInfoModel *userinfo = [UserInfoModel mj_objectWithKeyValues:originData];
                    NSMutableDictionary *params = [NSMutableDictionary dictionary];
                    params[@"cardId"] = userinfo.cardId;
                    params[@"journeyId"] = userinfo.journeyId;
                    params[@"groupId"] = userinfo.groupId;
                    [downloader POST:MainShowURL param:params wating:^{
                        
                    } fail:^{
                        
                    } success:^(NSDictionary *originData) {
                        TravelIntroModel *model = [TravelIntroModel mj_objectWithKeyValues:originData];
                        [[NSUserDefaults standardUserDefaults] setObject:model.stuName forKey:StuNameKey];
                        userinfo.stuName = model.stuName;
                        [[NSUserDefaults standardUserDefaults] setObject:model.type forKey:AgreementKey];
                        [NSUserDefaults resetStandardUserDefaults];
                        if ([model.type integerValue] == 1 ) {
                            WJPTravelNoteHomePageController *homePage = [[WJPTravelNoteHomePageController alloc]init];
                            RootNavigationController *navi = [[RootNavigationController alloc]initWithRootViewController:homePage];
                            [UIApplication sharedApplication].keyWindow.rootViewController = navi;
                        }else{
                            TraveIntroViewController *intro = [[TraveIntroViewController alloc]init];
                            RootNavigationController *navi = [[RootNavigationController alloc]initWithRootViewController:intro];
                            [UIApplication sharedApplication].keyWindow.rootViewController = navi;
                        }

                    } refresh:YES];
                } else if ([obj integerValue] == 1){
                    WJPTravelNoteHomePageController *homePage = [[WJPTravelNoteHomePageController alloc]init];
                    RootNavigationController *navi = [[RootNavigationController alloc]initWithRootViewController:homePage];
                    [UIApplication sharedApplication].keyWindow.rootViewController = navi;
                } else {
                    TraveIntroViewController *intro = [[TraveIntroViewController alloc]init];
                    RootNavigationController *navi = [[RootNavigationController alloc]initWithRootViewController:intro];
                    [UIApplication sharedApplication].keyWindow.rootViewController = navi;
                }
            });
        }
    } refresh:YES];
}

#pragma mark -- UITextFieldDelegate
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    _cardIdTextField.text = [JPDeleteLastSpace deleteLastSpaceInString:_cardIdTextField.text];
    if (_cardIdTextField.text.length > 0 && [[_cardIdTextField.text substringFromIndex:_cardIdTextField.text.length-1] isEqualToString:@"x"]) {
        NSString *xxxString = [_cardIdTextField.text substringToIndex:_cardIdTextField.text.length-1];
        _cardIdTextField.text = [xxxString stringByAppendingString:@"X"];
    }
    if (![CardIdVerification cardIdVerification:textField.text]) {
        [self showTips:@"身份证格式错误"];
        return NO;
    }
    if (_cardIdTextField.isFirstResponder) {
        [_cardIdTextField resignFirstResponder];
    }    [self makeSureClickConnection:nil];
    return YES;
}

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    [super touchesBegan:touches withEvent:event];
    if (_cardIdTextField.isFirstResponder) {
        [_cardIdTextField resignFirstResponder];
    }
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    
    //    _needChangeStatusColor = YES;
    //增加监听，当键盘出现或改变时收出消息
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillShow:)
                                                 name:UIKeyboardWillShowNotification
                                               object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillHide:)
                                                 name:UIKeyboardWillHideNotification
                                               object:nil];
    
    [self.navigationController setNavigationBarHidden:YES animated:YES];
    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault];
    
    [self loadDataFromCache];
    [self loadDataFromServer];
}


- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self.navigationController setNavigationBarHidden:NO animated:YES];
    [_cardIdTextField resignFirstResponder];
    //    if (_needChangeStatusColor) {
    //        [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];
    //    }
    
    [self removeTimer];
    
    [self removeTimer];
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillHideNotification object:nil];
    
    //    [_cardIdTextField resignFirstResponder];
    
}


- (void)keyboardWillShow:(NSNotification *)aNotification
{
    //获取键盘的高度
    NSDictionary *userInfo = [aNotification userInfo];
    NSValue *aValue = [userInfo objectForKey:UIKeyboardFrameEndUserInfoKey];
    CGRect keyboardRect = [aValue CGRectValue];
    int height = keyboardRect.size.height;
    _keyboardHeight = height;
    
    id bValue = [userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
    CGFloat animationDur = [bValue floatValue];
    _keyboardDur = animationDur;
    
    [UIView animateWithDuration:animationDur animations:^{
        CGRect frame = self.myRootView.frame;
        frame.origin.y = -height;
        self.myRootView.superview.frame = frame;
    }];
}

- (void)keyboardWillHide:(NSNotification *)aNotification
{
    NSDictionary *userInfo = [aNotification userInfo];
    
    id bValue = [userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
    CGFloat animationDur = [bValue floatValue];
    _keyboardDur = animationDur;
    
    [UIView animateWithDuration:animationDur animations:^{
        CGRect frame = self.myRootView.frame;
        frame.origin.y = 0;
        self.myRootView.superview.frame = frame;
    }];
    
}
@end
